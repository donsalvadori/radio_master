#!/usr/bin/env node

/* jshint undef:true, unused:true, node:true */

var Path = require('path');
var fs = require('fs');
var assert = require('assert');

var exe = Path.basename(__filename);
var puts = makePrintLine(process.stdout);
var eputs = makePrintLine(process.stderr);

var args = process.argv.slice(2);
var options = {};
var files = [];
var output;
var sourceMaps = false;
var runCode = false;

for (var i = 0, length = args.length; i < length; i++) {
  var arg = args[i];

  switch (arg) {
    case '-h': case '--help':
      usage(puts);
      process.exit(0);
      break;

    case '-v': case '--version':
      puts(exe + ' v' + require(Path.join(__dirname, '../package.json')).version);
      process.exit(0);
      break;

    case '--arrow-function': case '--no-arrow-function':
      options.arrowFunction = (arg === '--arrow-function');
      break;

    case '--class': case '--no-class':
      options['class'] = (arg === '--class');
      break;

    case '--computed-property-keys': case '--no-computed-property-keys':
      options.computedPropertyKeys = (arg === '--computed-property-keys');
      break;

    case '--default-params': case '--no-default-params':
      options.defaultParams = (arg === '--default-params');
      break;

    case '--destructuring': case '--no-destructuring':
      options.destructuring = (arg === '--destructuring');
      break;

    case '--generator': case '--no-generator':
      options.generator = (arg === '--generator');
      break;

    case '--object-concise': case '--no-object-concise':
      options.objectConcise = (arg === '--object-concise');
      break;

    case '--object-shorthand': case '--no-object-shorthand':
      options.objectShorthand = (arg === '--object-shorthand');
      break;

    case '--rest': case '--no-rest':
      options.rest = (arg === '--rest');
      break;

    case '--spread': case '--no-spread':
      options.spread = (arg === '--spread');
      break;

    case '--templates': case '--no-templates':
      options.templates = (arg === '--templates');
      break;

    case '--source-maps': case '--no-source-maps':
      sourceMaps = (arg === '--source-maps');
      break;

    case '--include-runtime': case '--no-include-runtime':
      options.includeRuntime = (arg === '--include-runtime');
      break;

    case '-o': case '--output':
      output = args[++i];
      if (!output || output[0] === '-') {
        eputs('error: ' + exe + ' - missing argument for `--output`');
        process.exit(1);
      }
      break;

    case '-e': case '--exec':
      runCode = true;
      options.includeRuntime = true;
      break;

    default:
      if (arg[0] === '-') {
        usage(eputs);
        process.exit(1);
      } else {
        files.push(arg);
      }
      break;
  }
}

switch (files.length) {
  case 0:
    if (runCode) {
      runInput(process.stdin, options);
    } else {
      transpileIO(process.stdin, process.stdout, null, options);
    }
    break;

  case 1:
    if (sourceMaps && !output) {
      eputs('error: ' + exe + ' - cannot enable source maps when outputting to stdout');
      process.exit(1);
    }
    var target, nodeInstance;

    if (fs.existsSync(output) && fs.statSync(output).isDirectory()) {
      target = Path.join(output, Path.basename(files[0]));
    } else {
      target = output;
    }

    if (target) {
      transpileFile(files[0], target);
    } else if (runCode) {
      runInput(fs.createReadStream(files[0]), options);
    } else {
      transpileIO(fs.createReadStream(files[0]), process.stdout, null, options);
    }
    break;

  default:
    if (!output) {
      eputs('error: ' + exe + ' - missing argument for `--output`');
      process.exit(1);
    }
    files.forEach(function(file) {
      transpileFile(file, Path.join(output, file.replace(/^(\.\.\/)+/, '')));
    });
    break;
}

function runInput(input, options) {
  var spawn = require('child_process').spawn;
  var esnext = require('../lib');

  readInput(input, function(string) {
    var result = esnext.compile(string, options);

    // create a node child process
    nodeInstance = spawn('node');

    // pipe the compiled code to the node child process
    nodeInstance.stdin.end(result.code);

    // make any stdout data visible to the main process
    nodeInstance.stdout.pipe(process.stdout);
    nodeInstance.stderr.pipe(process.stderr);
  });
}

function transpileIO(input, output, sourceMapOutput, options) {
  var esnext = require('../lib');

  readInput(input, function(inputString) {
    var result = esnext.compile(inputString, options);
    output.write(result.code);
    if (sourceMapOutput) {
      if (sourceMaps) {
        assert.ok(
          result.map,
          'expected source map but got nothing for file: ' + file
        );
        sourceMapOutput.write(JSON.stringify(result.map, null, 2));
      }
    }
  });
}

function readInput(input, callback) {
  readStream(input, function(err, string) {
    if (err) {
      eputs('error: ' + err.message);
    } else {
      callback(string);
    }
  });
}

function readStream(input, callback) {
  var inputString = '';

  input.on('data', function(chunk) {
    inputString += chunk;
  });

  input.on('end', function() {
    callback(null, inputString);
  });

  input.on('error', function(err) {
    callback(err);
  });
}

function transpileFile(file, target) {
  var mkdirp = require('mkdirp');
  var fileOptions = Object.create(options);
  var sourceMapTarget;
  var sourceMapOutput;

  if (sourceMaps) {
    sourceMapTarget = target + '.map';
    fileOptions.sourceFileName = target;
    fileOptions.sourceMapName = sourceMapTarget;
    sourceMapOutput = fs.createWriteStream(sourceMapTarget);
  }

  var input = fs.createReadStream(file);
  mkdirp.sync(Path.dirname(target));
  transpileIO(input, fs.createWriteStream(target), sourceMapOutput, fileOptions);
}

function bold(string) {
  return '\x1b[01m' + string + '\x1b[0m';
}

function usage(puts) {
  puts(exe + ' [<options>] <path> [<path> ...]');
  puts();
  puts(bold('Feature Options'));
  puts();
  puts('  All ES6 features are on by default. Use --no-[option] to turn one off.');
  puts();
  puts('  --array-comprehensions   Transpile array comprehensions.');
  puts('  --arrow-function         Transpile arrow functions.');
  puts('  --class                  Transpile classes.');
  puts('  --computed-property-keys Transpile computed property keys.');
  puts('  --default-params         Transpile default parameters.');
  puts('  --destructuring          Transpile destructuring.');
  puts('  --generator              Transpile generator functions.');
  puts('  --object-concise         Transpile object literal concise method definitions.');
  puts('  --object-shorthand       Transpile object literal shorthand.');
  puts('  --rest                   Transpile rest params.');
  puts('  --spread                 Transpile spread operator.');
  puts('  --templates              Transpile template strings.');
  puts();
  puts(bold('Output Options'));
  puts();
  puts('  -o, --output       File or directory to place output.');
  puts('  -e, --exec         Execute compiled code rather than writing it.');
  puts('  --source-maps      Output source maps (off by default).');
  puts('  --include-runtime  Include any required runtimes (off by default).');
  puts();
  puts(bold('Basic Options'));
  puts();
  puts('  -v, --version  Print the version.');
  puts('  -h, --help     Show this help message.');
}

function makePrintLine(stream) {
  return function(string) {
    if (!string || string[string.length - 1] !== '\n') {
      string = (string || '') + '\n';
    }
    stream.write(string);
  };
}
